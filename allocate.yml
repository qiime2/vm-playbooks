---

- name: allocate AWS resources
  hosts: localhost
  connection: local
  vars_files:
    - vars.yml
  tasks:
    - name: create vpc
      ec2_vpc:
        state: present
        internet_gateway: true
        cidr_block: "{{ vpc_cidr_block }}"
        resource_tags:
          Name: "{{ workshop_name }}"
          Environment: "{{ workshop_name }}"
        region: "{{ ec2_region }}"
        subnets:
          - cidr: "{{ vpc_cidr_block }}"
            resource_tags:
              Name: "{{ workshop_name }} subnet"
        route_tables:
          - subnets:
            - "{{ vpc_cidr_block }}"
            routes:
              - dest: 0.0.0.0/0
                gw: igw
      register: vpc

    - name: get subnet
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc_id }}"
        region: "{{ ec2_region }}"
        cidr: "{{ vpc_cidr_block }}"
        resource_tags:
          Name: "{{ workshop_name }} subnet"
        state: present
      register: subnet

    - debug: var=subnet

    - name: create security groups
      ec2_group:
        name: "{{ item.name }}"
        description: "{{ item.desc }}"
        rules: "{{ item.rules }}"
        region: "{{ ec2_region }}"
        vpc_id: "{{ vpc.vpc_id }}"
        state: present
      with_items: "{{ security_groups }}"

    - name: create keypair
      ec2_key:
        name: "{{ workshop_name }}"
        region: "{{ ec2_region }}"
        state: present
      register: key

    - name: save keypair to localhost
      copy:
        content: "{{ key.key.private_key }}"
        dest: ./workshopkey-private.pem
        mode: 0600
      when: key.changed

    - name: allocate jump host instance
      ec2:
        region: "{{ ec2_region }}"
        keypair: "{{ key.key.name }}"
        group: "{{ item.group }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        instance_type: "{{ item.instance_type }}"
        image: "{{ item.image }}"
        instance_tags: "{{ item.instance_tags }}"
        exact_count: "{{ item.exact_count }}"
        count_tag: "{{ item.count_tag }}"
        wait: true
      register: jump_host
      with_items: "{{ ec2_jump_host_instances }}"

    - name: allocate compute instances
      ec2:
        region: "{{ ec2_region }}"
        keypair: "{{ key.key.name }}"
        group: "{{ item.group }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        instance_type: "{{ item.instance_type }}"
        image: "{{ item.image }}"
        instance_tags: "{{ item.instance_tags }}"
        exact_count: "{{ item.exact_count }}"
        count_tag: "{{ item.count_tag }}"
        wait: true
      with_items: "{{ ec2_compute_instances }}"

    - name: assign public ip to jump host
      ec2_eip:
        region: "{{ ec2_region }}"
        device_id: "{{ jump_host.results[0].tagged_instances[0].id }}"
        ip: "{{ eip }}"
