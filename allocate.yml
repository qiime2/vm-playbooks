---

- name: allocate AWS resources
  hosts: localhost
  connection: local
  vars_files:
    - vars.yml
  tasks:
    - name: create vpc
      ec2_vpc:
        state: present
        internet_gateway: True
        cidr_block: "{{ vpc_cidr_block }}"
        resource_tags:
          Name: "{{ workshop_name }}"
          Environment: "{{ workshop_name }}"
        region: "{{ ec2_region }}"
        subnets:
          - cidr: "{{ vpc_cidr_block }}"
            resource_tags:
              Name: "{{ workshop_name }} subnet"
        route_tables:
          - subnets:
            - "{{ vpc_cidr_block }}"
            routes:
              - dest: 0.0.0.0/0
                gw: igw
      register: vpc

    - name: get subnet
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc_id }}"
        region: "{{ ec2_region }}"
        cidr: "{{ vpc_cidr_block }}"
        resource_tags:
          Name: "{{ workshop_name }} subnet"
        state: present
      register: subnet

    - name: create security groups
      ec2_group:
        name: "{{ item.name }}"
        description: "{{ item.desc }}"
        rules: "{{ item.rules }}"
        region: "{{ ec2_region }}"
        vpc_id: "{{ vpc.vpc_id }}"
        state: present
      with_items: "{{ security_groups }}"

    - name: create keypair
      ec2_key:
        name: "{{ workshop_name }}"
        region: "{{ ec2_region }}"
        state: present
      register: key

    - name: save keypair to localhost
      copy:
        content: "{{ key.key.private_key }}"
        dest: "./{{ workshop_key_fn }}"
        mode: 0600
      when: key.changed

    - name: allocate jump host instance
      ec2:
        region: "{{ ec2_region }}"
        keypair: "{{ key.key.name }}"
        group: "{{ item.group }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        instance_type: "{{ item.instance_type }}"
        image: "{{ item.image }}"
        instance_tags: "{{ item.instance_tags }}"
        exact_count: "{{ item.exact_count }}"
        count_tag: "{{ item.count_tag }}"
        wait: True
      with_items: "{{ ec2_jump_host_instances }}"

    - name: get jump host info
      ec2_remote_facts:
        region: "{{ ec2_region }}"
        filters:
          instance.group-name: "{{ group_name }}"
          "tag:Name": "{{ jump_host_name }}"
      register: jump_hosts

    - name: assign elastic ip to jump host
      ec2_eip:
        region: "{{ ec2_region }}"
        device_id: "{{ jump_hosts.instances[0].id }}"
        ip: "{{ eip }}"

    - name: add jump host to inventory
      add_host:
        name: "{{ eip }}"
        groups: jump_hosts, all_hosts

    - name: allocate compute instances
      ec2:
        region: "{{ ec2_region }}"
        keypair: "{{ key.key.name }}"
        group: "{{ item.group }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        instance_type: "{{ item.instance_type }}"
        image: "{{ item.image }}"
        instance_tags: "{{ item.instance_tags }}"
        exact_count: "{{ item.exact_count }}"
        count_tag: "{{ item.count_tag }}"
        assign_public_ip: True
        wait: True
      register: compute_hosts
      with_items: "{{ ec2_compute_instances }}"

    - name: add compute hosts to inventory
      add_host:
        name: "{{ item.1.public_ip }}"
        groups: all_hosts
      with_subelements:
        - "{{ compute_hosts.results }}"
        - tagged_instances

    - name: check if users files already exist
      stat:
        path: roster.json
      register: roster

    - name: generate account info
      command: "python {{ playbook_dir }}/generate_accts.py '{{ ec2_compute_instances | to_json }}'"
      when: not roster.stat.exists

    - pause: seconds=30

- hosts: all_hosts
  remote_user: ubuntu
  gather_facts: False
  tasks:
    - name: bootstrap python
      raw: sudo apt-get install -y python

- hosts: all_hosts
  remote_user: ubuntu
  become: True
  vars_files:
    - vars.yml
  vars:
    users: "{{ lookup('file', 'roster.json') | from_json }}"
  tasks:
    - debug: var=users
    - name: update all packages to the latest version
      apt:
        upgrade: dist
    - name: create groups
      group:
        name: "worker{{ (item | int) - 1 }}"
        state: present
      with_sequence: count="{{ compute_host_count }}"
    - name: create user accounts
      user:
        name: "{{ item.name }}"
        password: "{{ item.hash }}"
        group: "{{ item.group }}"
      with_items: "{{ users }}"
    - name: set up ssh (general)
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: '^PasswordAuthentication.*$', line: 'PasswordAuthentication yes' }
        - { regexp: '^.*Port.*$', line: 'Port 22' }
      notify:
        - restart ssh
  handlers:
    - name: restart ssh
      service: name=ssh state=restarted

- hosts: jump_hosts
  remote_user: ubuntu
  become: True
  tasks:
    - name: set up prereqs
      apt:
        name: "{{ item }}"
        state: latest
      with_items:
        - nginx
      # - name: configure ssh for jumping
      # - blockinfile:
      # -   dest: /etc/ssh/sshd_config
      # -   block: |
      # -     Match Group worker0
      # -     ProxyJump 35.161.244.42
      # - notify:
      # -   - restart ssh
  handlers:
    - name: restart ssh
      service: name=ssh state=restarted
